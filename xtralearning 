
# Techniques
## Fast and Slow Pointers
* fast pointers makes reaches the end of the list and slow in middle

##
##









# Python
### Finding maximum element in list
max(listname)
##

### Do not name a variable and functionname same in python
##

### refer to class inside a class to access init function
self.classname(elements)
##

### Sort and sorted
Sort: listname.sort()
Sorted: a= sorted(listname)  print a
##

* never modify the DS like list or dict while traversing through that

### Delete from Dictionary
del dictionary_name[key]
##

### get value from dictionary
dictionaryname.get(key)
##

### Binary Search

```
from bisect import bisect_left
bisect_left(array, value)

OR

def BinarySearch(a, x):
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    else:
        return -1
```

##

### trick of choosing between value and None
curr.next = l1 or l2
choose whatever is not none
##


### default dict

The functionality of both dictionaries and defualtdict are almost same except for the fact that defualtdict never raises a KeyError. It provides a default value for the key that does not exists.


```
d = defaultdict(def_value) 
d["a"] = 1
d["b"] = 2
  
print(d["a"]) 
print(d["b"]) 
print(d["c"]) 

```
Output:

1
2
Not Present
##

### iter()

The iter() function creates an object which can be iterated one element at a time.

```
# list of vowels
vowels = ['a', 'e', 'i', 'o', 'u']
vowels_iter = iter(vowels)

print(next(vowels_iter))    # 'a'
print(next(vowels_iter))    # 'e'
print(next(vowels_iter))    # 'i'
print(next(vowels_iter))    # 'o'
print(next(vowels_iter))    # 'u'
```

##

### converting list to dict()

zip()- he zip() function, by default, returns a list of merged tuples, but because we want a dictionary, we have used dict() to convert our tuples into a dictionary.
```
fruit_dictionary = dict(zip(fruits, prices))
```

##

### printing range of sets
set(range(10))
##

### set operations
list(set(range(n)) - set(j for i, j in edges))
##

### xrange()


##

### declaring a dictionary
```
graph = {i: [] for i in range(vertices)}
```
##






##
## NUMPY

### finding the minimum index of the numpy array
argmin(array)
##

### applying the condition on numpy array
array[array > 10]
##

## creating numpy array using range
np.array(range(start, end))
##
